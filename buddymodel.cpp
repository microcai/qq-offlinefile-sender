/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#include "buddymodel.hpp"

QVariant BuddyModel::data(const QModelIndex& index, int role) const
{
	webqq::qqBuddy_ptr ptr = (*buddies)[index.row()];

	if (role == Qt::UserRole)
		return QString(ptr->uin.c_str());
	if (role != Qt::DisplayRole)
		return QVariant();

	if (!ptr->card.empty())
		return  QString(ptr->card.c_str());

	if (!ptr->nick.empty())
		return  QString(ptr->nick.c_str());

	return  QString(ptr->uin.c_str());
	return QVariant();
}

int BuddyModel::rowCount(const QModelIndex& parent) const
{
	if (!buddies.isNull())
		return buddies->size();
	return 0;
}

void BuddyModel::set_buddies(QSharedPointer< std::vector< webqq::qqBuddy_ptr> > _p)
{
	emit layoutAboutToBeChanged();
    buddies.swap(_p);
    emit layoutChanged();
}
